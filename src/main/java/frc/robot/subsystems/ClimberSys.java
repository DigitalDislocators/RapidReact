// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import edu.wpi.first.wpilibj.motorcontrol.Spark;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

import com.ctre.phoenix.motorcontrol.NeutralMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

public class ClimberSys extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX climberMtr;
    private Spark setMtr;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * Constructs a new ClimberSys.
     * 
     * ClimberSys contains the hook deployment motors and the winch motor.
     * 
     * This subsystem contains methods for setting the motor powers and stopping them.
     */
    public ClimberSys() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        climberMtr = new WPI_TalonSRX(8);
        climberMtr.setSelectedSensorPosition(0);
        climberMtr.setNeutralMode(NeutralMode.Brake);

        setMtr = new Spark(0);

        setMtr.setInverted(true);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // 000000000000
    // - Versh (coding mentor)

    public void rotate(double power, TurretSys turretSys) {
        if(turretSys.getAngle() < -45) {
            setMtr.set(power);
        }
        else if(power <= 0) {
            setMtr.set(power);
        }
        else {
            setMtr.set(0.0);
        }

        if(power > 0) {
            turretSys.climb(true);
        }
        else if(power < 0) {
            turretSys.climb(false);
        }

    }

    public void set(double power) {
        climberMtr.set(power);
    }

    public void stop() {
        climberMtr.stopMotor();
    }

    public double getClimberCounts() {
        return -climberMtr.getSelectedSensorPosition();
    }

    public void zero() {
        climberMtr.setSelectedSensorPosition(0.0);
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

