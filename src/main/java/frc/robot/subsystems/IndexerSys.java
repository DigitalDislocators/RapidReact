// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.Constants;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.DriverStation.Alliance;
import edu.wpi.first.wpilibj.I2C.Port;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import com.revrobotics.ColorSensorV3;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


public class IndexerSys extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX intakeMtr;
    private WPI_TalonSRX indexerMtr;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private ColorSensorV3 sensor;

    private LightsSys m_lightsSys;

    private boolean m_ballIsGood;

    private boolean m_sensorIsEnabled;

    /**
     * Constructs a new IndexerSys.
     * 
     * IndexerSys contains the intake and indexer motors and the color/proximity sensor.
     * 
     * This subsystem contains methods for running the intake routine, setting the powers of the motors,
     * and stopping them.
     */
    public IndexerSys(LightsSys lightsSys) {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        intakeMtr = new WPI_TalonSRX(8);
        intakeMtr.setInverted(true);

        indexerMtr = new WPI_TalonSRX(9);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        sensor = new ColorSensorV3(Port.kOnboard);

        m_lightsSys = lightsSys;
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        if(sensor.getProximity() > 100) {
            if(sensor.getBlue() < 225) {
                if(DriverStation.getAlliance() == Alliance.Blue) {
                    m_ballIsGood = false;
                }
                else {
                    m_ballIsGood = true;
                }
                if(!m_lightsSys.getPartyMode()) {
                    m_lightsSys.red();
                }
                SmartDashboard.putString("ball color", "red");
            }
            else if(sensor.getBlue() > 225) {
                if(DriverStation.getAlliance() == Alliance.Red) {
                    m_ballIsGood = false;
                }
                else {
                    m_ballIsGood = true;
                }
                if(!m_lightsSys.getPartyMode()) {
                    m_lightsSys.blue();
                }
                SmartDashboard.putString("ball color", "blue");
            }
        }
        else {
            if(!m_lightsSys.getPartyMode()) {
                m_lightsSys.green();
            }
            m_ballIsGood = true;
        }
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    /**
     * Runs the intake unless a second ball has pushed the first one in front of the sensor.
     */
    public void intake() {
        if(!m_lightsSys.isBlinking()) {
            m_lightsSys.setBlink(true);
        }

        SmartDashboard.putNumber("sensor prox", sensor.getProximity());
        SmartDashboard.putNumber("sensor red", sensor.getRed());
        SmartDashboard.putNumber("sensor blue", sensor.getBlue());

        if(sensor.getProximity() > Constants.Sensor.indexerProxThresh) {
            intakeMtr.stopMotor();
        }
        else {
            intakeMtr.set(Constants.Power.intake);
        }
    }

    /**
     * Sets the power of both motors of the indexer.
     * 
     * @param power the desired power to set the indexer to
     */
    public void set(double power) {
        intakeMtr.set(power);
        indexerMtr.set(power);
    }

    /**
     * Stops both motors of the indexer.
     */
    public void stop() {
        m_lightsSys.setBlink(false);

        intakeMtr.stopMotor();
        indexerMtr.stopMotor();
    }

    /**
     * Checks whether the next ball should be shot.
     * 
     * @return true if the color of the ball in front of the sensor matches the alliance color.
     */
    public boolean ballIsGood() {
        return m_ballIsGood;
    }

    public boolean ballIsIn() {
        if(sensor.getProximity() > Constants.Sensor.indexerProxThresh) {
            return true;
        }
        else {
            return false;
        }
    }

    public boolean getSensorEnabled() {
        return m_sensorIsEnabled;
    }

    public void setSensorEnabled(boolean isEnabled) {
        m_sensorIsEnabled = isEnabled;
    }

}

