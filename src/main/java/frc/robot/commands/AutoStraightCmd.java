// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.Constants;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.PropulsionSys;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class AutoStraightCmd extends CommandBase {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private final PropulsionSys m_propulsionSys;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    private double m_counts;
    private double m_power;
    private double m_push = 0;
    private boolean m_isFinished = false;

    /**
     * Constructs a new AutoStraightCmd.
     * 
     * <p>AutoStraightCmd uses the encoders in the drivebase motors to command it to drive a certain distance, in feet and inches.
     * 
     * <p>This command is based off of a proportional controller, which means that the speed the robot drives turns will decrease 
     * as it approaches its target distance. This command features "push" variables that increases when the robot nearly stops 
     * outside of its targets, which adds power to the driving and turning until the robot moves to prevent it from not having 
     * enough power to reach the target distance.
     * 
     * <p>The command finishes when the robot is within one inch of its target and nearly stopped.
     * 
     * @param feet The number of feet of the target distance
     * @param inches The number of inches of the target distance
     * @param power The maximum power delivered to the drive base, which controls the speed of the turn
     * @param subsystem The required PropulsionSys
     */

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    public AutoStraightCmd(int feet, int inches, double power, PropulsionSys subsystem) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        m_propulsionSys = subsystem;
        addRequirements(m_propulsionSys);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // Adding feet and inches together and multiplying by the number of encoder counts in one inch of wheel rotation
        // plus the current encoder counts of the drivebase to obtain the target encoder counts of the drivebase motors
        m_counts = ((feet * 12) + inches) * Constants.Encoder.countsPerInch;

        // Making sure power is positive for continuity
        m_power = Math.abs(power);
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {

    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        // Proportional controller
        double power = ((m_counts - m_propulsionSys.getAverageEncoderCounts()) * Constants.PID.driveP) + m_push;

        // Factoring in power input
        if(power < -m_power) {
            power = -m_power;
        }
        else if(power > m_power) {
            power = m_power;
        }

        // Using speed for m_push and m_isFinished
        if(Math.abs(m_propulsionSys.getInchesPerSecond()) < 5) {
            if(m_propulsionSys.getAverageEncoderCounts() > m_counts - (Constants.Encoder.countsPerInch * 0.5) && m_propulsionSys.getAverageEncoderCounts() < m_counts + (Constants.Encoder.countsPerInch * 0.5)) {
                m_push = 0;
                m_isFinished = true;
            }
            else {
                if(power < 0) {
                    m_push -= Constants.PID.driveP * 0.5;
                }
                else {
                    m_push += Constants.PID.driveP * 0.5;
                }
            }
        }
        else {
            m_push = 0;
        }
        
        // Setting motor powers
        m_propulsionSys.tankDriveControl(power, power);
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
        // Sets motor powers to zero when command is finished.
        m_propulsionSys.stop();
        m_propulsionSys.zeroEncoders();
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return m_isFinished;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
