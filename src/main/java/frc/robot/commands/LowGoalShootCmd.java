// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.Constants;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.IndexerSys;
import frc.robot.subsystems.ShooterSys;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class LowGoalShootCmd extends CommandBase {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
        private final ShooterSys m_shooterSys;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    /**
     * Constructs a new AutoTurnCmd.
     * 
     * <p>AutoTurnCmd uses the gyro/IMU of the robot to command it to turn to a certain heading with accuracy to half a degree.
     * 
     * <p>This command is based off of a proportional controller, which means that the speed the robot turns will degrease
     * as it approaches its target heading. This command features a "push" variable that increases when the robot nearly stops 
     * outside of its target, which adds power to the turn until the robot moves to prevent it from not having enough power to 
     * reach the target heading.
     * 
     * <p>The command finishes when the robot is within 0.5Â° of its target and nearly stopped (less than 20 degrees per second).
     * 
     * @param degrees The target degrees the robot will turn in degrees
     * @param power The maximum power delivered to the drive base, which controls the speed of the turn
     * @param subsystem The required PropulsionSys
     * 
     */
    public LowGoalShootCmd(ShooterSys subsystem) {


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        m_shooterSys = subsystem;
        addRequirements(m_shooterSys);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {

    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        m_shooterSys.set(Constants.lowGoalPwr);
    }

    
    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {

    }

    
    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return true;
    }

    
    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
