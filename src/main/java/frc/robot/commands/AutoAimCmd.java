// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.Constants;
import frc.robot.subsystems.TurretSys;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.PropulsionSys;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class AutoAimCmd extends CommandBase {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private final TurretSys m_limelightSys;
    private final PropulsionSys m_propulsionSys;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    private double m_power;
    private double m_push;
    private boolean m_isFinished;

    /**
     * Constructs a new AutoTurnToHeadingCmd.
     * 
     * <p>AutoTurnHeadingCmd uses the gyro/IMU of the robot to command it to turn to a certain heading with accuracy to half 
     * a degree.
     * 
     * <p>This command is based off of a proportional controller, which means that the speed the robot turns will degrease
     * as it approaches its target heading. This command features a "push" variable that increases when the robot nearly stops 
     * outside of its target, which adds power to the turn until the robot moves to prevent it from not having enough power to 
     * reach the target heading.
     * 
     * <p>The command finishes when the robot is within 0.5Â° of its target and nearly stopped (less than 20 degrees per second).
     * 
     * @param heading The target heading of the robot in degrees
     * @param power The maximum power delivered to the drive base, which controls the speed of the turn
     * @param subsystem The required PropulsionSys
     */

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    public AutoAimCmd(double power, TurretSys subsystem1, PropulsionSys subsystem2) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        m_limelightSys = subsystem1;
        m_propulsionSys = subsystem2;
        
        addRequirements(m_limelightSys);
        addRequirements(m_propulsionSys);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // Making sure power is positive for continuity
        m_power = Math.abs(power);

    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        m_isFinished = false;
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        // Proportional controller
        double power = (m_limelightSys.getX() * Constants.KP.aim) + m_push;

        // Factoring in power input
        if(power < -m_power) {
            power = -m_power;
        }
        else if(power > m_power) {
            power = m_power;

        }
        
        // Using rotation rate for m_push and m_isFinished
        if(Math.abs(m_propulsionSys.getAngleRate()) < 20) {
            if(m_limelightSys.getX() > -0.5 && m_limelightSys.getX() < + 0.5) {
                m_push = 0;
                m_isFinished = true;
            }
            else {
                if(power < 0) {
                    m_push -= Constants.KP.turn * 0.5;
                }
                else {
                    m_push += Constants.KP.turn * 0.5;
                }
            }
        }
        else {
            m_push = 0;
        }

        SmartDashboard.putString("Status", "AIMING: " + m_limelightSys.getX());

        // Setting motor powers
        m_propulsionSys.tankDriveControl(power, -power);
    }

    
    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
        SmartDashboard.putString("Status", "AIMED");
        // Sets motor powers to zero when command is finished.
        m_propulsionSys.stop();
    }

    
    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return m_isFinished;
    }

    
    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
